### Random number generator:
### Search for algorithms generating pseudo-random numbers. Select one of them for generating a pseudo-random sequence. 
### Original sample can be generated in any form: binary, decimal, etc. 
### But submitted sample must be in the form of uniform random numbers on [0,1]. 
### The sample should not be generated by any function, like runif(), sample(), etc. 
### Instead it must be some algorithm that you code yourselves. For example, mid-square algorithm, Fibonacci-based algorithm, etc.


library(random)
nFlips<-1000
dataFromRandom<-randomNumbers(n=nFlips, min=0, max=1, col=1, base=2, check=TRUE)
View(dataFromRandom)
bitsToInt<-function(x) {
  packBits(rev(c(rep(FALSE, 32-length(x)%%32), as.logical(x))), "integer")
}
bitsToInt(c(1,1,1,1,1,0))
Binary.matrix<-matrix(dataFromRandom,ncol=10)
head(Binary.matrix)
dataFromRandom.dec<-apply(Binary.matrix,1,bitsToInt)/2^10
pseudoSample = dataFromRandom.dec

##---------------------------------------------------------------------------------------------------------------------

mid_square <- function(input){
  
  squared = input^2
  squared_v = unlist((strsplit(as.character(squared),'')))
  squared_n = length(squared_v)
  mid_v = squared_v[(round(squared_n/2)-2):(round(squared_n/2)+3)]
  mid = as.numeric(paste(mid_v, collapse=''))
  
  return(mid)
}

mid_square_generator <- function(seed, round){
  
  random_list = c()
  
  for (i in c(1:round)){
    seed = mid_square(seed)
    random_list = c(random_list, seed)
  }
  
  return(random_list)
}


standardize <- function(x){
  (x-min(x))/(max(x)-min(x))
  }

myseed <- 34514
pseudoSample <- standardize(mid_square_generator(myseed, 1000))
hist(pseudoSample)
